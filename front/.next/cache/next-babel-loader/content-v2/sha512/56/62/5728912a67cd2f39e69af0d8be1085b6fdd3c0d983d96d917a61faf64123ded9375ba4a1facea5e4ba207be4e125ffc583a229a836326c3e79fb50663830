{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Box, SelectedItem, Flag, MenuItem } from './language-switcher.style';\nimport Popover from 'components/popover/popover';\nimport { FormattedMessage } from 'react-intl';\nimport * as flagIcons from 'assets/icons/flags';\nimport { useLocale } from 'contexts/language/language.provider';\nimport { LANGUAGE_MENU } from 'site-settings/site-navigation';\n\nvar FlagIcon = function FlagIcon(_ref) {\n  var name = _ref.name;\n  var TagName = flagIcons[name];\n  return !!TagName ? /*#__PURE__*/_jsx(TagName, {}) : /*#__PURE__*/_jsxs(\"p\", {\n    children: [\"Invalid icon \", name]\n  });\n};\n\nvar LanguageMenu = function LanguageMenu(_ref2) {\n  var _config$restaurant, _config$restaurant$us;\n\n  var onClick = _ref2.onClick,\n      config = _ref2.config;\n  var languageList = [];\n  var configLanguagesList = (config === null || config === void 0 ? void 0 : config.restaurant.userConfig.auto_languages) && (config === null || config === void 0 ? void 0 : config.restaurant.userConfig.auto_languages.length) > 0 && (config === null || config === void 0 ? void 0 : config.restaurant.userConfig.auto_languages.split(\",\"));\n\n  if (config !== null && config !== void 0 && (_config$restaurant = config.restaurant) !== null && _config$restaurant !== void 0 && (_config$restaurant$us = _config$restaurant.userConfig) !== null && _config$restaurant$us !== void 0 && _config$restaurant$us.main_lang) {\n    languageList = LANGUAGE_MENU.filter(function (m) {\n      var _config$restaurant2, _config$restaurant2$u, _config$restaurant3, _config$restaurant3$u;\n\n      return m.id === (config === null || config === void 0 ? void 0 : (_config$restaurant2 = config.restaurant) === null || _config$restaurant2 === void 0 ? void 0 : (_config$restaurant2$u = _config$restaurant2.userConfig) === null || _config$restaurant2$u === void 0 ? void 0 : _config$restaurant2$u.main_lang) || m.id === (config === null || config === void 0 ? void 0 : (_config$restaurant3 = config.restaurant) === null || _config$restaurant3 === void 0 ? void 0 : (_config$restaurant3$u = _config$restaurant3.userConfig) === null || _config$restaurant3$u === void 0 ? void 0 : _config$restaurant3$u.alt_lang) || configLanguagesList.filter(function (mm) {\n        return mm === m.id;\n      }).length > 0;\n    });\n  } else {\n    languageList = LANGUAGE_MENU;\n  }\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: languageList.map(function (item) {\n      return /*#__PURE__*/_jsxs(MenuItem, {\n        onClick: onClick,\n        value: item.id,\n        children: [/*#__PURE__*/_jsx(\"span\", {\n          children: /*#__PURE__*/_jsx(FlagIcon, {\n            name: item.icon\n          })\n        }), /*#__PURE__*/_jsx(FormattedMessage, {\n          id: item.id,\n          defaultMessage: item.defaultMessage\n        })]\n      }, item.id);\n    })\n  });\n};\n\nvar LanguageSwitcher = function LanguageSwitcher(_ref3) {\n  var config = _ref3.config;\n\n  var _useLocale = useLocale(),\n      locale = _useLocale.locale,\n      changeLanguage = _useLocale.changeLanguage;\n\n  var selectedLanguage = LANGUAGE_MENU.find(function (x) {\n    return x.id === locale;\n  });\n\n  var languageChangeHandler = function languageChangeHandler(e) {\n    changeLanguage(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsx(Box, {\n    children: /*#__PURE__*/_jsx(Popover, {\n      className: \"right\",\n      handler: /*#__PURE__*/_jsxs(SelectedItem, {\n        children: [/*#__PURE__*/_jsx(Flag, {\n          children: /*#__PURE__*/_jsx(FlagIcon, {\n            name: selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.icon\n          })\n        }), /*#__PURE__*/_jsx(\"span\", {\n          children: /*#__PURE__*/_jsx(FormattedMessage, {\n            id: selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.id,\n            defaultMessage: selectedLanguage === null || selectedLanguage === void 0 ? void 0 : selectedLanguage.defaultMessage\n          })\n        })]\n      }),\n      content: /*#__PURE__*/_jsx(LanguageMenu, {\n        onClick: languageChangeHandler,\n        config: config\n      })\n    })\n  });\n};\n\nexport default LanguageSwitcher;","map":null,"metadata":{},"sourceType":"module"}