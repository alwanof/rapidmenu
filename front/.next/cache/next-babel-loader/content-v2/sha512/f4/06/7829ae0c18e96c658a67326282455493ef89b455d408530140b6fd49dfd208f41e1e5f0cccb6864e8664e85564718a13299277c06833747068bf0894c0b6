{"ast":null,"code":"import useSWR from 'swr';\nimport Fuse from 'fuse.js';\nconst options = {\n  // isCaseSensitive: false,\n  // includeScore: false,\n  shouldSort: true,\n  // includeMatches: false,\n  // findAllMatches: false,\n  // minMatchCharLength: 1,\n  // location: 0,\n  threshold: 0.3,\n  // distance: 100,\n  // useExtendedSearch: false,\n  // ignoreLocation: false,\n  // ignoreFieldNorm: false,\n  minMatchCharLength: 2,\n  keys: ['title']\n};\n\nfunction search(list, pattern) {\n  const fuse = new Fuse(list, options);\n  return fuse.search(pattern).map(current => current.item);\n} // import productFetcher from 'utils/api/product';\n\n\nconst productFetcher = url => fetch(url).then(res => res.json());\n\nexport default function useProducts(variables) {\n  const {\n    type,\n    text,\n    category,\n    offset = 0,\n    limit = 20,\n    slug,\n    altLang\n  } = variables !== null && variables !== void 0 ? variables : {};\n  const {\n    data,\n    mutate,\n    error\n  } = useSWR(text ? !altLang ? `${process.env.NEXT_PUBLIC_REST_API_ENDPOINT}/item/search?user=${slug}&maintitle=${text}&maindesc=${text}` : `${process.env.NEXT_PUBLIC_REST_API_ENDPOINT}/item/search?user=${slug}&atltitle=${text}&altdesc=${text}` : category ? `${process.env.NEXT_PUBLIC_REST_API_ENDPOINT}/categories/${category}/items?user=${slug}` : `${process.env.NEXT_PUBLIC_REST_API_ENDPOINT}/items?user=${slug}`, productFetcher);\n  const loading = !data && !error;\n  const products = data === null || data === void 0 ? void 0 : data.data; // need to remove when you using real API integration\n  // const [formattedData, setFormattedData] = useState(false);\n\n  /*let products = data?.filter((current) => current.type === type);\n  if (category) {\n    products = products?.filter((product) =>\n      product.categories.find(\n        (category_item) => category_item.slug === category\n      )\n    );\n  }\n  if (text) {\n    products = search(products, text);\n  }*/\n  // let localOffset = offset;\n  // let localLimit = limit;\n  // const fetchMore = async (os, lmt) => {\n  //   localOffset = os;\n  //   localLimit = lmt;\n  //   setFormattedData(true);\n  // };\n  // console.log('object');\n  // data: [\n  //   ...state.data,\n  //   ...state.total.slice(\n  //     state.data.length,\n  //     state.data.length + state.limit\n  //   ),\n  // ],\n  // need to implement fetchMore\n  // const hasMore = products?.length > localOffset + localLimit;\n\n  return {\n    loading,\n    error,\n    data: products,\n    // hasMore,\n    mutate // fetchMore,\n\n  };\n}","map":null,"metadata":{},"sourceType":"module"}