{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { useContext, useState, useEffect } from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, Form, ErrorMessage } from 'formik';\nimport { closeModal } from '@redq/reuse-modal';\nimport TextField from 'components/forms/text-field'; // import { Button } from 'components/button/button';\n\nimport styled from 'styled-components'; // import { useMutation } from '@apollo/client';\n// import { UPDATE_ADDRESS } from 'graphql/mutation/address';\n\nimport { FieldWrapper, Heading, MapContainer } from './address-card.style';\nimport { ProfileContext } from 'contexts/profile/profile.context';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\nimport MapPointer from 'assets/icons/map.png';\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY); // Shape of form values\n\n// Wrap our form with the using withFormik HoC\nconst FormEnhancer = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      id: props.item.id || null,\n      name: props.item.name || '',\n      address: props.item.address || '',\n      house: props.item.house || '',\n      aprt: props.item.aprt || '',\n      lat: props.item.lat || 41.113139,\n      lng: props.item.lng || 29.020306,\n      dist: props.item.dist,\n      bell: props.item.bell\n    };\n  },\n  validationSchema: Yup.object().shape({\n    address: Yup.string().required('Address is required'),\n    house: Yup.string().required('House is required'),\n    aprt: Yup.string().required('Apartment is required')\n  }),\n  handleSubmit: values => {// do submitting things\n  }\n});\n\nconst UpdateAddress = props => {\n  const intl = useIntl();\n  const {\n    isValid,\n    item,\n    values,\n    touched,\n    errors,\n    dirty,\n    handleChange,\n    handleBlur,\n    handleReset,\n    isSubmitting,\n    setFieldValue,\n    config\n  } = props;\n  const addressValue = {\n    id: values.id,\n    type: 'primary',\n    name: values.name,\n    address: values.address,\n    house: values.house,\n    aprt: values.aprt,\n    lat: values.lat,\n    lng: values.lng,\n    dist: values.dist,\n    bell: values.bell\n  };\n  const {\n    state,\n    dispatch\n  } = useContext(ProfileContext); // const [addressMutation, { data }] = useMutation(UPDATE_ADDRESS);\n\n  const {\n    0: lat,\n    1: setLat\n  } = useState(addressValue.lat);\n  const {\n    0: lng,\n    1: setLng\n  } = useState(addressValue.lng);\n  const {\n    0: map,\n    1: setMap\n  } = useState(null);\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: process.env.NEXT_PUBLIC_STRIPE_PUBLIC_KEY\n  });\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setLat(position.coords.latitude);\n        setLng(position.coords.longitude);\n      }, () => {});\n    }\n  }, []);\n\n  const onLoad = mapInstance => {\n    setMap(mapInstance);\n  };\n\n  const renderMap = () => {\n    return /*#__PURE__*/_jsx(GoogleMap, {\n      onLoad: onLoad,\n      id: \"map\",\n      center: {\n        lat: lat,\n        lng: lng\n      },\n      mapContainerClassName: \"map\",\n      zoom: 14,\n      onDragEnd: () => {\n        setFieldValue(\"lat\", lat);\n        setFieldValue(\"lng\", lng);\n        Geocode.fromLatLng(lat, lng).then(response => {\n          const address = response.results[0];\n          setFieldValue(\"address\", address.formatted_address);\n          if (address.address_components && address.address_components.length > 3) setFieldValue(\"dist\", address.address_components[3].long_name);\n        }, error => {\n          console.error(error);\n        });\n      },\n      onCenterChanged: () => {\n        if (map) {\n          setLat(map.getCenter().lat());\n          setLng(map.getCenter().lng());\n        }\n      },\n      children: /*#__PURE__*/_jsx(\"img\", {\n        src: MapPointer,\n        alt: \"map_pointer\",\n        className: \"pointIcon\"\n      })\n    });\n  };\n\n  const handleSubmit = async () => {\n    if (isValid) {\n      // const addressData = await addressMutation({\n      //   variables: { addressInput: JSON.stringify(addressValue) },\n      // });\n      dispatch({\n        type: 'ADD_OR_UPDATE_ADDRESS',\n        payload: addressValue\n      });\n      closeModal();\n    }\n  };\n\n  return /*#__PURE__*/_jsxs(Form, {\n    children: [/*#__PURE__*/_jsx(Heading, {\n      children: item && item.id ? /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"deliveryAddressTitle\",\n        defaultMessage: \"Edit Address\"\n      }) : /*#__PURE__*/_jsx(FormattedMessage, {\n        id: \"deliveryAddressTitle\",\n        defaultMessage: \"Add New Address\"\n      })\n    }), /*#__PURE__*/_jsx(MapContainer, {\n      children: isLoaded ? renderMap() : /*#__PURE__*/_jsx(\"span\", {\n        children: \"Loading the maps...\"\n      })\n    }), /*#__PURE__*/_jsx(FieldWrapper, {\n      children: /*#__PURE__*/_jsx(TextField, {\n        id: \"address\",\n        as: \"textarea\",\n        placeholder: intl.formatMessage({\n          id: 'form.address'\n        }),\n        value: values.address,\n        onChange: handleChange,\n        onBlur: handleBlur\n      })\n    }), /*#__PURE__*/_jsx(ErrorMessage, {\n      name: \"address\",\n      component: StyledError\n    }), /*#__PURE__*/_jsx(FieldWrapper, {\n      children: /*#__PURE__*/_jsx(TextField, {\n        id: \"house\",\n        type: \"text\",\n        placeholder: intl.formatMessage({\n          id: 'form.house'\n        }),\n        value: values.house,\n        onChange: handleChange,\n        onBlur: handleBlur\n      })\n    }), /*#__PURE__*/_jsx(ErrorMessage, {\n      name: \"house\",\n      component: StyledError\n    }), /*#__PURE__*/_jsx(FieldWrapper, {\n      children: /*#__PURE__*/_jsx(TextField, {\n        id: \"aprt\",\n        type: \"text\",\n        placeholder: intl.formatMessage({\n          id: 'form.aprt'\n        }),\n        error: touched.aprt && errors.aprt,\n        value: values.aprt,\n        onChange: handleChange,\n        onBlur: handleBlur\n      })\n    }), /*#__PURE__*/_jsx(ErrorMessage, {\n      name: \"aprt\",\n      component: StyledError\n    }), /*#__PURE__*/_jsx(FieldWrapper, {\n      children: /*#__PURE__*/_jsx(TextField, {\n        id: \"bell\",\n        type: \"text\",\n        placeholder: intl.formatMessage({\n          id: 'form.bell'\n        }),\n        error: touched.bell && errors.bell,\n        value: values.bell,\n        onChange: handleChange,\n        onBlur: handleBlur\n      })\n    })]\n  });\n};\n\nconst StyledError = styled.div.withConfig({\n  displayName: \"address-card__StyledError\",\n  componentId: \"sc-1wte1lo-0\"\n})([\"color:red;padding-bottom:10px;margin-top:-5px;\"]);\nexport default FormEnhancer(UpdateAddress);","map":null,"metadata":{},"sourceType":"module"}