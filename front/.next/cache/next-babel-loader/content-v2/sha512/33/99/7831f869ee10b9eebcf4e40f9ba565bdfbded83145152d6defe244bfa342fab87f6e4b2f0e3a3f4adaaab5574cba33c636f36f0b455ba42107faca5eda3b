{"ast":null,"code":"import useSWR from 'swr';\nimport Fuse from 'fuse.js';\nvar options = {\n  // isCaseSensitive: false,\n  // includeScore: false,\n  shouldSort: true,\n  // includeMatches: false,\n  // findAllMatches: false,\n  // minMatchCharLength: 1,\n  // location: 0,\n  threshold: 0.3,\n  // distance: 100,\n  // useExtendedSearch: false,\n  // ignoreLocation: false,\n  // ignoreFieldNorm: false,\n  minMatchCharLength: 2,\n  keys: ['title']\n};\n\nfunction search(list, pattern) {\n  var fuse = new Fuse(list, options);\n  return fuse.search(pattern).map(function (current) {\n    return current.item;\n  });\n} // import productFetcher from 'utils/api/product';\n\n\nvar productFetcher = function productFetcher(url) {\n  return fetch(url).then(function (res) {\n    return res.json();\n  });\n};\n\nexport default function useProducts(variables) {\n  var _ref = variables !== null && variables !== void 0 ? variables : {},\n      type = _ref.type,\n      text = _ref.text,\n      category = _ref.category,\n      _ref$offset = _ref.offset,\n      offset = _ref$offset === void 0 ? 0 : _ref$offset,\n      _ref$limit = _ref.limit,\n      limit = _ref$limit === void 0 ? 20 : _ref$limit,\n      slug = _ref.slug,\n      altLang = _ref.altLang;\n\n  var _useSWR = useSWR(text ? !altLang ? \"\".concat(process.env.NEXT_PUBLIC_REST_API_ENDPOINT, \"/item/search?user=\").concat(slug, \"&maintitle=\").concat(text, \"&maindesc=\").concat(text) : \"\".concat(process.env.NEXT_PUBLIC_REST_API_ENDPOINT, \"/item/search?user=\").concat(slug, \"&atltitle=\").concat(text, \"&altdesc=\").concat(text) : category ? \"\".concat(process.env.NEXT_PUBLIC_REST_API_ENDPOINT, \"/categories/\").concat(category, \"/items?user=\").concat(slug) : \"\".concat(process.env.NEXT_PUBLIC_REST_API_ENDPOINT, \"/items?user=\").concat(slug), productFetcher),\n      data = _useSWR.data,\n      mutate = _useSWR.mutate,\n      error = _useSWR.error;\n\n  var loading = !data && !error;\n  var products = data === null || data === void 0 ? void 0 : data.data; // need to remove when you using real API integration\n  // const [formattedData, setFormattedData] = useState(false);\n\n  /*let products = data?.filter((current) => current.type === type);\n  if (category) {\n    products = products?.filter((product) =>\n      product.categories.find(\n        (category_item) => category_item.slug === category\n      )\n    );\n  }\n  if (text) {\n    products = search(products, text);\n  }*/\n  // let localOffset = offset;\n  // let localLimit = limit;\n  // const fetchMore = async (os, lmt) => {\n  //   localOffset = os;\n  //   localLimit = lmt;\n  //   setFormattedData(true);\n  // };\n  // console.log('object');\n  // data: [\n  //   ...state.data,\n  //   ...state.total.slice(\n  //     state.data.length,\n  //     state.data.length + state.limit\n  //   ),\n  // ],\n  // need to implement fetchMore\n  // const hasMore = products?.length > localOffset + localLimit;\n\n  return {\n    loading: loading,\n    error: error,\n    data: products,\n    // hasMore,\n    mutate: mutate // fetchMore,\n\n  };\n}","map":null,"metadata":{},"sourceType":"module"}